// 1. IMPORT REDUXTOOLKIT PACKAGE
// 2. GET AN INSTANCE OF CREATESLICE FROM IT
// 5. GET AN INSTANCE OF CREATEASYNCTHUNK MIDDLEWARE FROM IT
import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";

// 6. IMPORT AXIOS
import axios from "axios";

// 3. INITIAL STATE FOR THE USER SLICE
const initialState = {
	loading: false,
	users: [],
	error: "",
};

// 7. CREATE ASYNC ACTION CREATOR USING CREATEASYNCTHUNK MIDDLEWARE
// Syntax -
// const ActionCreatorName = createAsyncThunk("ActionType", CallBackFn that returns the payload)
// This generates pending, fulfilled and rejected action creators
// And we can listen to this action types using the reducers and perform necessary state transition.
// The reducer for this is not generated by the createSlice and has to be added using extra reducers.
const fetchUsers = createAsyncThunk("userSlice/fetchUsers", () => {
	return axios
		.get("https://jsonplaceholder.typicode.com/users")
		.then((response) => response.data);
	// .catch((error) => console.log(error)); // No need for catch statement
	// as the error handling is done by the createAsyncThunk middleware itself.
});

// 4. NOW CREATE THE SLICE
const userSlice = createSlice({
	name: "userSlice",
	initialState,
	extraReducers: (builder) => {
		builder.addCase(fetchUsers.pending, (state) => {
			state.loading = true;
		});
		builder.addCase(fetchUsers.fulfilled, (state, action) => {
			state.loading = false;
			state.users = action.payload;
			state.error = "";
		});
		builder.addCase(fetchUsers.rejected, (state, action) => {
			state.loading = false;
			state.users = [];
			state.error = action.error.message;
		});
	},
});

export default userSlice.reducer; // default export
export const fetchUsersAction = fetchUsers;
