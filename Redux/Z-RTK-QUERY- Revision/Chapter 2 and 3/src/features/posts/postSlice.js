import { createSlice, nanoid } from "@reduxjs/toolkit";
import { sub } from "date-fns";

// InitialState for postSlice feature
const initialState = [
	{
		id: "1",
		title: "Learning Redux Toolkit",
		content: "I've heard good things.",
		// this is creating a new Date for current time and then subtracting 10 minutes from the current time and then converting that to iso string.
		date: sub(new Date(), { minutes: 10 }).toISOString(),
		reactions: {
			thumbsUp: 0,
			wow: 0,
			heart: 0,
			rocket: 0,
			coffee: 0,
		},
	},
	{
		id: "2",
		title: "Slices...",
		content: "The more I say slice, the more I want pizza.",
		date: sub(new Date(), { minutes: 5 }).toISOString(),
		reactions: {
			thumbsUp: 0,
			wow: 0,
			heart: 0,
			rocket: 0,
			coffee: 0,
		},
	},
];

// Posts feature slice
export const postSlice = createSlice({
	// postSlice feature "name"
	name: "posts",

	// "initial state" for postSlice feature
	initialState,

	// "reducers" for postSlice feature
	reducers: {
		postAdded: {
			// prepare reducer method
			// if we want to perform some actions on the payload data or on the state
			// then we can do it in the prepare method and then return the formated state
			// Then, the returned formatted state will then be passed to the reducer method which is the actual reducer method where we perform actions on the data and update the feature state.
			prepare: (title, content, userId) => {
				return {
					payload: {
						id: nanoid(),
						title,
						content,
						userId,
						date: new Date().toISOString(),
						reactions: {
							thumbsUp: 0,
							wow: 0,
							heart: 0,
							rocket: 0,
							coffee: 0,
						},
					},
				};
			},

			// reducer method
			reducer: (state, action) => {
				// normally mutating the state because immerjs(provided within the redux-toolkit) is handling the creation of new state and then pushing the data into that new state and then replacing the new updated data of the current feature state to the new data.
				// Also immerjs only works inside the createSlice method for updating the feature state.
				state.push(action.payload);
			},
		},
		// reducer to increase the reactions count in the posts features
		reactionAdded(state, action) {
			const { postId, reaction } = action.payload;
			const existingPost = state.find((post) => post.id === postId);
			if (existingPost) {
				existingPost.reactions[reaction]++;
			}
		},
	},
});

// selector function for the postSlice feature state
// This selector function will help us in selecting only the state
// for this feature which is postSlice feature
export const selectAllPosts = (storeState) => storeState.posts;

// exporting the postSlice feature Reducers Action Creators -
// These actions creators methods are generated by the createSlice() method with the
// same name as the reducers that we have defined in the reducers property in the
// createSlice method()
export const { postAdded, reactionAdded } = postSlice.actions;

// export the postSlice feature Reducer
export default postSlice.reducer;
