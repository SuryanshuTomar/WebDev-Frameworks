// => WHAT IS REACT ?

// 1. React is JavaScript Library for building User Interfaces
// 2. React is all about Components. And we use those components to build those User Interfaces and React Embraces this Component Concept. It uses components to effectively compose user interfaces and it uses components to effectively update user interfaces.
// 3. There is also has a ReactDOM module. ReactDOM is the interface to the WEB. React.js itself does not know the web. It does know nothing about the browser in the end. React knows how to work with  components but it doesn't care whether those components contain HTML elements or if they contain totally fictional elements, that does not matter to React. It's ReactDOM to which that matters in the end and which ultimately needs to bring real HTML elements to the screen. 
// 4. So, React is just a library that manages components, that manages state  and that manages different components states and that finds out how components might need to change and which differences you might have from a previous state of a component compared to the current state. And React hands all that information regarding what changed and what should be visible on the screen no matter what screen that is, off to the interface it's working with. For example, it hands it off to ReactDOM because ReactDOM is then responsible for working with the real DOM, which is part of the browser. And therefore ReactDOM is responsible for bringing something onto the screen, which the user is then able to see. 
// 5. React only cares about components. It cares about props, which is basically data you pass to components to make components configurable and to enable parent-child component communication. React cares about state which is internal data inside of a component. And React cares about context which is component-wide data.
// 6. React has a couple of other features built in as well. But these are the core features. And whenever props, state or context changes, components that use these concepts are updated by React and React checks whether this component now wants to draw something new onto the screen. And if that should be the case, React will let ReactDOM know about that so that ReactDOM is able to bring that new screen, that new component, that new output to the screen.
// 7. So therefore, if we have a close look at that components real DOM communication here, the question of course is, how exactly does this work?


// ---------------------------------------------------------------------------------------------------
// => HOW DOES REACT WORKS ?

// 1. As we already know that React is concerned about components and what React in the end does is, it uses a concept called the VIRTUAL-DOM. 
// 2. VIRTUAL-DOM determines how the COMPONENT-TREE, which your app is building in the end, and every component itself, It also has a SUB-TREE, that JSX code returned by that component. 
// 3. VIRTUAL-DOM determines how that COMPONENT-TREE currently looks like and what it should look like. For Example - after a state update. And that information is then handed off to ReactDOM which now knows about the differences and which then knows how it should manipulate the REAL-DOM to match that VIRTUAL-DOM, that virtual snapshot React derived for your COMPONENT-TREES.
// 4. Whenever a state, props or a context of a component changes that component function is re-executed. That component is re-evaluated by React. But it is worth noting that reevaluating a component is not the same as re-rendering the DOM.(Re-Evaluating Components !== Re-Rendering the DOM)
// 5. So just because a component function is re-executed by React does not mean that the respective part of the actual real DOM is re-rendered or re-evaluated. Instead we have to differentiate between our component part, our React part and the real DOM.
// 6. Our components, as I just said, are re-evaluated whenever props, state or context changes. So React then executes that component function again.
// 7. Now the real DOM on the other hand is only updated in the places where it needs to be changed based on that difference React derived between the previous state of a component and its tree and the current state after the state prop or context change. So the real DOM is not changed all the time. 
// 8. It's changed rarely and only when needed. And that's important for performance, because making a virtual comparison between the previous state and the current state, that's fairly cheap and easy to do. That happens only in memory. But Reaching out to the real DOM, that's rendered in the browser is pretty expensive from a performance perspective, because working with the real DOM just turns out to be a performance intensive task. Of course not a tiny change in one place, but if you do that tiny change in a lot of places all the time, then your page might become slow because you're working with the real DOM too much.
// 9. And that's why React has this structure of doing virtual comparisons with that virtual DOM and then only passing the changes between your last snapshot and the current snapshot to the real DOM. That's how React works here. It does this virtual DOM diffing, finding out the difference between two snapshots.
